give me 100 % same css styling as uploaded in pic. 
give me full updated file.

import React, { useState, useEffect } from "react";
import "../styling/Profile.css";
import api from "../api/axiosInstance";
import Local from "../environment/env";
import { toast } from "react-toastify";


const Profile: React.FC = () => {
    const [activeTab, setActiveTab] = useState<"basic" | "personal">("basic");
    const [profileData, setProfileData] = useState({
        user: {
            firstname: "",
            lastname: "",
            email: "",
            phone: "",
            address_one: "",
            address_two: "",
            city: "",
            state: "",
            zip_code: "",
            dob: "",
            gender: "",
            martial_status: "",
            social_security: "",
            social: "",
            kids: ""

        }
    });

    const token = localStorage.getItem('token');


    // Fetch profile data on component mount
    useEffect(() => {
        const fetchProfileData = async () => {
            try {
                const response = await api.get(`${Local.GET_PROFILE}`, {
                    headers: {
                        Authorization: `Bearer ${token}`
                    }
                });
                console.log("helooooooooooooooo", response.data);
                if (response.status === 200) {
                    setProfileData(response.data);
                } else {
                    console.error("Failed to fetch profile data:", response.statusText);
                }
            } catch (error) {
                console.error("Error fetching profile data:", error);
            }
        };

        fetchProfileData();
    }, []);

    // Handle field input changes
    const handleInputChange = (section: string, field: string, value: string) => {
        setProfileData((prev: any) => ({
            ...prev,
            [section]: {
                ...prev[section],
                [field]: value,
            },
        }));
    };

    // Save updated profile data
    const handleSaveChanges = async () => {
        try {
            const response = await api.post(`${Local.UPDATE_PROFILE}`, profileData.user, {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            if (response.status === 200) {
                toast.success(`${response.data.message}`);
            } else {
                console.error("Failed to update profile:", response.statusText);
                alert("There was an error updating your profile.");
            }
        } catch (error) {
            console.error("Error saving profile data:", error);
            alert("An error occurred while saving your profile.");
        }
    };

    return (
        <div className= "profile-container" >
        {/* Header Section */ }
        < div className = "profile-header" >
            <div className="profile-bg-text" > My Profile </div>
                < img
    src = "https://via.placeholder.com/100"
    alt = "Profile"
    className = "profile-image"
        />
        <div className="profile-info" >
            <p className="profile-text" > Upload a New Photo </p>
                < button className = "change-picture-button" > Change Picture </button>
                    </div>
                    </div>

                    < h5 > Change Information </h5>

    {/* Tabs */ }
    <div className="tabs" >
        <button
          className={ `tab ${activeTab === "basic" ? "active" : ""}` }
    onClick = {() => setActiveTab("basic")}
        >
    Basic Details
        </button>
        < button
className = {`tab ${activeTab === "personal" ? "active" : ""}`}
onClick = {() => setActiveTab("personal")}
        >
    Personal Details
        </button>
        </div>

{/* Form */ }
{
    activeTab === "basic" ? (
        <form className= "profile-form" >
        <div className="form-row" >
            <div className="form-group" >
                <label htmlFor="firstname" > First Name * </label>
                    < input
    type = "text"
    id = "firstname"
    placeholder = "First Name"
    value = { profileData.user.firstname }
    onChange = {(e) =>
    handleInputChange("user", "firstname", e.target.value)
}
              />
    </div>

    < div className = "form-group" >
        <label htmlFor="lastname" > Last Name * </label>
            < input
type = "text"
id = "lastname"
placeholder = "Last Name"
value = { profileData.user.lastname }
onChange = {(e) =>
handleInputChange("user", "lastname", e.target.value)
                }
              />
    </div>
    </div>

    < div className = "form-row" >
        <div className="form-group" >
            <label htmlFor="email" > Enter Email * </label>
                < input
type = "email"
id = "email"
placeholder = "Email"
value = { profileData.user.email }
onChange = {(e) =>
handleInputChange("user", "email", e.target.value)
                }
              />
    </div>

    < div className = "form-group" >
        <label htmlFor="socialSecurity" > Social Security(Numbers only) </label>
            < input
type = "text"
id = "socialSecurity"
placeholder = "Social Security"
value = { profileData.user.social_security }
onChange = {(e) =>
handleInputChange(
    "preference",
    "social_security",
    e.target.value
)
                }
              />
    </div>
    </div>

    < div className = "form-row" >

        <div className="form-group" >
            <label htmlFor="phone" > Phone Number * </label>
                < input
type = "text"
id = "phone"
placeholder = "Phone Number"
value = { profileData.user.phone }
onChange = {(e) =>
handleInputChange("user", "phone", e.target.value)
                }
              />
    </div>

{/* Address Section */ }
<div className="form-group" >
    <label htmlFor="addressOne" > Address One * </label>
        < input
type = "text"
id = "addressOne"
placeholder = "Address One"
value = { profileData.user.address_one }
onChange = {(e) =>
handleInputChange("user", "address_one", e.target.value)
                }
              />
    < /div></div >


    <div className="form-row" >

        <div className="form-group" >
            <label htmlFor="addressTwo" > Address Two </label>
                < input
type = "text"
id = "addressTwo"
placeholder = "Address Two"
value = { profileData.user.address_two }
onChange = {(e) =>
handleInputChange("user", "address_two", e.target.value)
                }
              />

    </div>

    < div className = "form-group" >
        <label htmlFor="city" > City * </label>
            < input
type = "text"
id = "city"
placeholder = "City"
value = { profileData.user.city }
onChange = {(e) =>
handleInputChange("user", "city", e.target.value)
                }
              />
    < /div></div >

    <div className="form-row" >

        <div className="form-group" >
            <label htmlFor="state" > State * </label>
                < input
type = "text"
id = "state"
placeholder = "State"
value = { profileData.user.state }
onChange = {(e) =>
handleInputChange("user", "state", e.target.value)
                }
              />
    </div>

    < div className = "form-group" >
        <label htmlFor="zip" > Home Zip Code * </label>
            < input
type = "text"
id = "zip"
placeholder = "Zip Code"
value = { profileData.user.zip_code }
onChange = {(e) =>
handleInputChange("user", "zip_code", e.target.value)
                }
              />
    </div>
    </div>
    </form>
      ) : (
    <form className= "profile-form" >
    <div className="form-row" >
        <div className="form-group" >
            <label htmlFor="dob" > DOB * </label>
                < input
type = "date"
id = "dob"
value = { profileData.user.dob }
onChange = {(e) =>
handleInputChange("user", "dob", e.target.value)
                }
              />
    </div>

    < div className = "form-group" >
        <label htmlFor="gender" > Gender * </label>
            < input
type = "text"
id = "gender"
placeholder = "Gender"
value = { profileData.user.gender }
onChange = {(e) =>
handleInputChange("user", "gender", e.target.value)
                }
              />
    </div>
    </div>
    < div className = "form-row" >
        <div className="form-group" >
            <label htmlFor="martialStatus" > Marital Status </label>
                < input
type = "text"
id = "martialStatus"
placeholder = "Marital Status"
value = { profileData.user.martial_status }
onChange = {(e) =>
handleInputChange("user", "martial_status", e.target.value)
                }
              />
    </div>

    < div className = "form-group" >
        <label htmlFor="socialSecurity" > Social Security(Numbers only) </label>
            < input
type = "text"
id = "socialSecurity"
placeholder = "Social Security"
value = { profileData.user.social_security }
onChange = {(e) =>
handleInputChange(
    "user",
    "social_security",
    e.target.value
)
                }
              />
    </div>



    </div>
    < div className = "form-row" >
        <div className="form-group" >
            <label htmlFor="social" > Social </label>
                < input
type = "text"
id = "social"
placeholder = "FaceBook"
value = { profileData.user.social }
onChange = {(e) =>
handleInputChange("user", "social", e.target.value)
                }
              />
    </div>
    < div className = "form-group" >
        <label htmlFor="kids" > Kids(If Any) </label>
            < input
type = "number"
id = "kids"
placeholder = "Number of Kids"
value = { profileData.user.kids }
onChange = {(e) =>
handleInputChange("user", "kids", e.target.value)
                }
              />
    </div>
    </div>
    </form>
      )
      }

<div className="update-button-container" >
    <button onClick={ handleSaveChanges } className = "update-button" >
        Update
        </button>
        </div>
        </div >
  );
};

export default Profile;

/* Profile.css */
.profile - container {
    /* max-width: 800px; */
    margin: 0 auto;
    font - family: Arial, sans - serif;
}

.profile - header {
    position: relative;
    background - color: #b49867;
    /* Light golden background */
    padding: 20px;
    display: flex;
    align - items: center;
    justify - content: space - between;
    /* Push elements apart */
    border - radius: 8px;
    overflow: hidden;
    margin - bottom: 5 %;
}

.profile - bg - text {
    position: absolute;
    top: 50 %;
    left: 50 %;
    transform: translate(-50 %, -50 %);
    font - size: 4rem;
    color: #aa8b55;
    /* Light golden text */
    font - weight: bold;
    z - index: 0;
    pointer - events: none;
}

.profile - image {
    width: 80px;
    height: 80px;
    border - radius: 50 %;
    z - index: 1;
    margin - right: 20px;
}

.profile - info {
    display: flex;
    flex - direction: column;
    z - index: 1;
    flex - grow: 1;
    /* Allow the text section to expand */
    margin - right: 20px;
    /* Add spacing before the button */
}

.profile - text {
    font - size: 1.2rem;
    color: #ffffff;
    /* White text */
    margin: 0;
}

.change - picture - button {
    background - color: #ffffff;
    /* White background */
    border: none;
    color: #000;
    /* Black text */
    padding: 8px 16px;
    font - size: 1rem;
    border - radius: 4px;
    cursor: pointer;
    max - width: 20 %;
    align - self: flex - end;
    transition: background - color 0.3s ease, color 0.3s ease;
}

.change - picture - button:hover {
    background - color: #ddd;
    /* Slightly darker on hover */
    color: #333;
}


.form - section {
    background - color: #f9f9f9;
    padding: 20px;
    border - radius: 10px;
    box - shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.form - section h2 {
    margin - bottom: 20px;
    font - size: 1.5rem;
}

.tabs {
    display: flex;
    margin - bottom: 20px;
    gap: 10px;
}

.tab {
    padding: 10px 15px;
    border: none;
    background - color: transparent;
    border - radius: 5px;
    cursor: pointer;
    color: rgb(51, 51, 51);


}

.tab.active {
    color: rgb(51, 51, 51);
    border - bottom: 5px solid #3D5576;
    padding - bottom: 5px;
    max - width: fit - content;
    border - radius: 1px;
}

.profile - form {
    display: flex;
    flex - direction: column;
    gap: 20px;
}

.form - row {
    display: flex;
    gap: 20px;
}

.form - group {
    flex: 1;
    display: flex;
    flex - direction: column;
}

.form - group label {
    margin - bottom: 5px;
    font - size: 0.9rem;
    font - weight: bold;
}

.form - group input {
    padding: 10px;
    border: 1px solid #ddd;
    border - radius: 5px;
}

/* Add this for the button alignment */
.update - button - container {
    display: flex;
    justify - content: flex - end;
    margin - top: 10px;
}

.update - button {
    padding: 10px 20px;
    background - color: #3D5576;
    color: white;
    border: none;
    border - radius: 5px;
    cursor: pointer;
    width: 20 %;
}

.update - button:hover {
    background - color: #2a3f5a;
    /* Slightly darker on hover */
}
