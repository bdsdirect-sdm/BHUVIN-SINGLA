show time below message rather than date . 

for new date , like whatsapp show today , yesterday and then date . 

in below code 

give me full updated file with full functionality working 


// import React, { useEffect, useState } from "react";
// import { useNavigate } from "react-router-dom";
// import { useQuery } from "@tanstack/react-query";
// import io from "socket.io-client";
// import { toast } from "react-toastify";
// import api from "../api/axiosInstance";
// import { Local } from "../environment/env";
// import "../Styling/Chat.css";


// const socket = io("http://localhost:4000/");

// const Chat: React.FC = () => {
//     const navigate = useNavigate();
//     const token = localStorage.getItem("token");
//     var chatdata = JSON.parse(localStorage.getItem("chatdata") || "{}");
//     const [messages, setMessages] = useState<any[]>([]);
//     const [newMessage, setNewMessage] = useState("");
//     const direct = Object.keys(chatdata).length;
//     const pname = localStorage.getItem('pname');

//     useEffect(() => {
//         if (!token) {
//             navigate("/login");
//         }

//         function fetchChats() {
//             socket.emit("joinchat", chatdata);
//             socket.on("prev_msg", async (data: any) => {
//                 setMessages([]);
//                 await data.map((metadata: any) =>
//                     setMessages((prev: any) => [...prev, metadata])
//                 );
//             });
//         }
//         fetchChats();

//         return () => {
//             localStorage.removeItem("chatdata");
//             socket.off("prev_msg");
//         };
//     }, []);

//     const getRooms = async () => {
//         try {
//             const response = await api.get(`${Local.GET_ROOM}`, {
//                 headers: {
//                     Authorization: `Bearer ${token}`
//                 }
//             });
//             return response.data;
//         } catch (err: any) {
//             toast.error(err.response.data.message)
//         }
//     }

//     const { data: rooms, error, isLoading, isError } = useQuery({
//         queryKey: ["rooms"],
//         queryFn: getRooms
//     });

//     useEffect(() => {
//         socket.on("getRoom", (getRoom) => {
//             localStorage.setItem("room", getRoom);
//         });
//     }, [socket]);

//     useEffect(() => {
//         socket.on("new_message", (data: any) => {
//             setMessages((prev: any) => [...prev, data]);
//         });
//     }, [socket]);

//     const openChat = (patient: any, doc1: any, doc2: any, user: any, pfirstname: string, plastname: string) => {
//         const chatData = { patient, user1: doc1, user2: doc2, user };
//         localStorage.setItem("chatdata", JSON.stringify(chatData));
//         const n = `${pfirstname} ${plastname}`;
//         localStorage.setItem("pname", n);

//         setMessages([]);

//         socket.emit("joinchat", chatData);
//     };

//     const sendMessage = async () => {
//         if (newMessage.trim() === "") {
//             toast.warn("Please Enter Message");
//         } else {
//             const receiver = chatdata.user !== chatdata.user1 ? chatdata.user1 : chatdata.user2;

//             const data = {
//                 sender: chatdata.user,
//                 message: newMessage.trim(),
//                 receiver: receiver,
//                 room: localStorage.getItem("room"),
//             };
//             socket.emit("send_message", data);
//             setNewMessage("");
//         }
//     };

//     if (isLoading) {
//         return (
//             <>
//                 <div className='loading-icon'>
//                     <div className="spinner-border spinner text-primary me-2" role="status">
//                         <span className="visually-hidden">Loading...</span>
//                     </div>
//                     <div className='me-2 fs-2' >Loading...</div>
//                 </div>
//             </>
//         );
//     }

//     if (isError) {
//         return (
//             <>
//                 <div>Error: {error?.message}</div>
//             </>
//         );
//     }

//     return (
//         <>
//             <div className="chat-layout">
//                 <div className="chat-sidebar">
//                     <input
//                         type="text"
//                         className="search-bar"
//                         placeholder="Search Patient"
//                     />
//                     <div className="chat-patient-list">
//                         {rooms?.room?.map((room: any) => (
//                             <div key={room.patient.uuid} className="patient-item active mb-2" onClick={() => {
//                                 openChat(room?.patient?.uuid, room?.doc1?.uuid, room?.doc2?.uuid, rooms?.user?.uuid, room?.patient?.firstname, room?.patient?.lastname);
//                             }}>
//                                 <h5>{room.name}</h5>
//                                 <p>
//                                     {room.doc1.uuid !== rooms.user.uuid && (
//                                         <>
//                                             {room.doc1.firstname} {room.doc1.lastname}
//                                         </>
//                                     )}
//                                     {room.doc2.uuid !== rooms.user.uuid && (
//                                         <>
//                                             {room.doc2.firstname} {room.doc2.lastname}
//                                         </>
//                                     )}
//                                 </p>
//                             </div>
//                         ))}
//                     </div>
//                 </div>

//                 {direct !== 0 && (
//                     <div className="chat-main">
//                         <div className="chat-header">
//                             <h4>{pname}</h4>
//                         </div>

//                         <div className="chat-messages">
//                             {messages.map((msg: any, index: number) => (
//                                 <div key={index} className={`chat-bubble ${msg.sender_id === chatdata.user ? "chat-sent" : "chat-received"}`}>
//                                     <p>{msg.message}</p>
//                                     <span className="message-timestamp"> {msg.createdAt.split("T")[0]} </span>
//                                 </div>
//                             ))}
//                         </div>

//                         <div className="chat-input-container">
//                             <input
//                                 type="text"
//                                 className="chat-input"
//                                 value={newMessage}
//                                 onChange={(e) => setNewMessage(e.target.value)}
//                                 placeholder="Type a message..."
//                             />
//                             <button className="chat-send-button" onClick={sendMessage}>
//                                 <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-send" viewBox="0 0 16 16">
//                                     <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576zm6.787-8.201L1.591 6.602l4.339 2.76z" />
//                                 </svg>
//                             </button>
//                         </div>
//                     </div>
//                 )}
//             </div>
//         </>
//     );
// };

// export default Chat;


import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useQuery } from "@tanstack/react-query";
import io from "socket.io-client";
import { toast } from "react-toastify";
import api from "../api/axiosInstance";
import { Local } from "../environment/env";
import "../Styling/Chat.css";

const socket = io("http://localhost:4000/");

const Chat: React.FC = () => {
    const navigate = useNavigate();
    const token = localStorage.getItem("token");
    var chatdata = JSON.parse(localStorage.getItem("chatdata") || "{}");
    const [messages, setMessages] = useState<any[]>([]);
    const [newMessage, setNewMessage] = useState("");
    const direct = Object.keys(chatdata).length;
    const pname = localStorage.getItem('pname');

    useEffect(() => {
        if (!token) {
            navigate("/login");
        }

        function fetchChats() {
            socket.emit("joinchat", chatdata);
            socket.on("prev_msg", async (data: any) => {
                setMessages([]);
                await data.map((metadata: any) =>
                    setMessages((prev: any) => [...prev, metadata])
                );
            });
        }
        fetchChats();

        return () => {
            localStorage.removeItem("chatdata");
            socket.off("prev_msg");
        };
    }, []);

    const getRooms = async () => {
        try {
            const response = await api.get(`${Local.GET_ROOM}`, {
                headers: {
                    Authorization: `Bearer ${token}`
                }
            });
            return response.data;
        } catch (err: any) {
            toast.error(err.response.data.message);
        }
    };

    const { data: rooms, error, isLoading, isError } = useQuery({
        queryKey: ["rooms"],
        queryFn: getRooms
    });

    useEffect(() => {
        socket.on("getRoom", (getRoom) => {
            localStorage.setItem("room", getRoom);
        });
    }, [socket]);

    useEffect(() => {
        socket.on("new_message", (data: any) => {
            setMessages((prev: any) => [...prev, data]);
        });
    }, [socket]);

    const openChat = (patient: any, doc1: any, doc2: any, user: any, pfirstname: string, plastname: string) => {
        const chatData = { patient, user1: doc1, user2: doc2, user };
        localStorage.setItem("chatdata", JSON.stringify(chatData));
        const n = `${pfirstname} ${plastname}`;
        localStorage.setItem("pname", n);

        setMessages([]);

        socket.emit("joinchat", chatData);
    };

    const sendMessage = async () => {
        if (newMessage.trim() === "") {
            toast.warn("Please Enter Message");
        } else {
            const receiver = chatdata.user !== chatdata.user1 ? chatdata.user1 : chatdata.user2;

            const data = {
                sender: chatdata.user,
                message: newMessage.trim(),
                receiver: receiver,
                room: localStorage.getItem("room"),
            };
            socket.emit("send_message", data);
            setNewMessage("");
        }
    };

    if (isLoading) {
        return (
            <>
                <div className='loading-icon'>
                    <div className="spinner-border spinner text-primary me-2" role="status">
                        <span className="visually-hidden">Loading...</span>
                    </div>
                    <div className='me-2 fs-2'>Loading...</div>
                </div>
            </>
        );
    }

    if (isError) {
        return (
            <>
                <div>Error: {error?.message}</div>
            </>
        );
    }

    return (
        <>
            <div className="chat-layout">
                <div className="chat-sidebar">
                    <input
                        type="text"
                        className="search-bar"
                        placeholder="Search Patient"
                    />
                    <div className="chat-patient-list">
                        {rooms?.room?.map((room: any) => (
                            <div
                                key={room.patient.uuid}
                                className="patient-item active mb-2"
                                onClick={() => openChat(room.patient.uuid, room.doc1.uuid, room.doc2.uuid, rooms.user.uuid, room.patient.firstname, room.patient.lastname)}
                            >
                                <h5>{room.name}</h5>
                                <p>
                                    {room.doc1.uuid !== rooms.user.uuid && (
                                        <>
                                            {room.doc1.firstname} {room.doc1.lastname}
                                        </>
                                    )}
                                    {room.doc2.uuid !== rooms.user.uuid && (
                                        <>
                                            {room.doc2.firstname} {room.doc2.lastname}
                                        </>
                                    )}
                                </p>
                            </div>
                        ))}
                    </div>
                </div>

                {direct !== 0 && (
                    <div className="chat-main">
                        <div className="chat-header">
                            <h4>{pname}</h4>
                        </div>

                        <div className="chat-messages">
                            {messages.map((msg: any, index: number) => (
                                <div key={index} className={`chat-bubble ${msg.sender_id === chatdata.user ? "chat-sent" : "chat-received"}`}>
                                    <p>{msg.message}</p>
                                    <span className="message-timestamp">{msg.createdAt.split("T")[0]}</span>
                                </div>
                            ))}
                        </div>

                        <div className="chat-input-container">
                            <input
                                type="text"
                                className="chat-input"
                                value={newMessage}
                                onChange={(e) => setNewMessage(e.target.value)}
                                placeholder="Type a message..."
                            />
                            <button className="chat-send-button" onClick={sendMessage}>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-send" viewBox="0 0 16 16">
                                    <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576zm6.787-8.201L1.591 6.602l4.339 2.76z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                )}
            </div>
        </>
    );
};

export default Chat;


.chat-layout {
    display: flex;
    height: calc(100vh);
    /* Adjusted height to fit the layout */
    background-color: #e5ddd5;
}

.chat-sidebar {
    width: 25%;
    background-color: #f6f6f6;
    border-right: 1px solid #ddd;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
}

.search-bar {
    padding: 10px;
    margin: 10px;
    border: none;
    border-radius: 20px;
    background-color: #ffffff;
    outline: none;
    font-size: 14px;
}

.chat-patient-list {
    padding: 0 10px;
    overflow-y: auto;
    /* Enables scrolling for patient list */
    max-height: calc(100vh - 110px);
    /* Adjusted based on the layout */
}

.patient-item {
    padding: 10px;
    border-radius: 8px;
    cursor: pointer;
    transition: background 0.3s ease;
    display: flex;
    flex-direction: column;
}

.patient-item:hover {
    background-color: #58EBB3;
}

.patient-item h5 {
    margin: 0;
    font-weight: bold;
    color: #333;
}

.patient-item p {
    margin: 5px 0 0;
    font-size: 12px;
    color: #555;
}

.chat-main {
    width: 75%;
    display: flex;
    flex-direction: column;
    background-color: #e5ddd5;
    height: 83%;
}

.chat-header {
    padding: 15px;
    background-color: #38a3b1;
    color: rgb(255, 255, 255);
    font-size: 18px;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 15px;
    background: #fceded;
    max-height: calc(100vh - 150px);
    /* Adjusted height to prevent overflow */
}

.chat-bubble {
    max-width: 70%;
    padding: 10px 15px;
    margin: 10px 0;
    border-radius: 10px;
    word-wrap: break-word;
    width: fit-content;
}

.chat-sent {
    margin-left: auto;
    background-color: #58EBB3;
    text-align: right;
}

.chat-received {
    margin-right: auto;
    background-color: #fff;
    text-align: left;
}

.message-timestamp {
    display: block;
    font-size: 10px;
    margin-top: 5px;
    color: #666;
}

.chat-input-container {
    display: flex;
    align-items: center;
    padding: 10px;
    background-color: #ffffff;
    border-top: 1px solid #ddd;
}

.chat-input {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 20px;
    background-color: #f0f0f0;
    outline: none;
    font-size: 14px;
    margin-right: 10px;
}

.chat-send-button {
    background: none;
    border: none;
    outline: none;
    cursor: pointer;
    color: #128c7e;
    font-size: 16px;
    transition: color 0.3s ease;
}

.chat-send-button:hover {
    color: #075e54;
}
